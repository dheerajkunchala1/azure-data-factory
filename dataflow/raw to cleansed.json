{
	"name": "raw to cleansed",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_customers",
						"type": "DatasetReference"
					},
					"name": "Customers"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_products",
						"type": "DatasetReference"
					},
					"name": "products"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_stores",
						"type": "DatasetReference"
					},
					"name": "stores"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_orders_parquet",
						"type": "DatasetReference"
					},
					"name": "orders"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_order_items",
						"type": "DatasetReference"
					},
					"name": "orderitems"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_cleansed_customers",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_products",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_stores",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_orders",
						"type": "DatasetReference"
					},
					"name": "sink4"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_order_items",
						"type": "DatasetReference"
					},
					"name": "sink5"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "cast1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "cast2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "select1"
				},
				{
					"name": "cast3"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "select2"
				},
				{
					"name": "cast4"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CUSTOMER_ID as integer,",
				"          EMAIL_ADDRESS as string,",
				"          FULL_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> Customers",
				"source(output(",
				"          PRODUCT_ID as short,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> products",
				"source(output(",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          STORE_ID as short,",
				"          STORE_NAME as string,",
				"          WEB_ADDRESS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> stores",
				"source(output(",
				"          ORDER_ID as string,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as string,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> orders",
				"source(output(",
				"          ORDER_ID as short,",
				"          LINE_ITEM_ID as short,",
				"          PRODUCT_ID as short,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> orderitems",
				"Customers derive(UPDATED_TIMESTAMP = currentUTC()) ~> derivedColumn1",
				"products cast(output(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 derive(UPDATED_TIMESTAMP = currentUTC()) ~> derivedColumn2",
				"stores cast(output(",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          STORE_ID as integer,",
				"          STORE_NAME as string,",
				"          WEB_ADDRESS as string",
				"     ),",
				"     errors: true) ~> cast2",
				"cast2 derive(UPDATED_TIMESTAMP = currentUTC()) ~> derivedColumn3",
				"derivedColumn3 select(mapColumn(",
				"          STORE_ID,",
				"          STORE_NAME,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          UPDATED_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"orders cast(output(",
				"          ORDER_ID as integer,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer",
				"     ),",
				"     errors: true) ~> cast3",
				"cast3 derive(UPDATED_TIMESTAMP = currentUTC(),",
				"          ORDER_DATE = toDate(ORDER_DATETIME, 'DD-MMM-yy HH.mm.ss.SS')) ~> derivedColumn4",
				"derivedColumn4 select(mapColumn(",
				"          ORDER_ID,",
				"          ORDER_DATE,",
				"          CUSTOMER_ID,",
				"          ORDER_STATUS,",
				"          STORE_ID,",
				"          UPDATED_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"orderitems cast(output(",
				"          ORDER_ID as integer,",
				"          LINE_ITEM_ID as short,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer",
				"     ),",
				"     errors: true) ~> cast4",
				"cast4 derive(UPDATED_TIMESTAMP = currentUTC()) ~> derivedColumn5",
				"derivedColumn5 select(mapColumn(",
				"          ORDER_ID,",
				"          PRODUCT_ID,",
				"          UNIT_PRICE,",
				"          QUANTITY,",
				"          UPDATED_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink4",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink5"
			]
		}
	}
}